import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
import time
import os
import smtplib
from email.mime.text import MIMEText
from dotenv import load_dotenv
load_dotenv()

token = os.environ.get("AVIASALES_TOKEN")
url = 'https://api.travelpayouts.com/aviasales/v3/prices_for_dates'

#email —Ä–∞—Å—Å—ã–ª–∫–∞
SMTP_SERVER = "smtp.yandex.ru"
SMTP_PORT = 465
EMAIL_SENDER = "m.krylov.a@yandex.ru"
EMAIL_PASSWORD = os.environ.get("EMAIL_PASSWORD")
EMAIL_RECEIVERS = ["cattrap.3s@gmail.com", "kurchavovr@gmail.com"]


THRESHOLD_TO = 20000
THRESHOLD_BACK = 22000

watch_routes_to = {'KZN‚ÜíKIX', 'KZN‚ÜíTYO', 'KZN‚ÜíFUK'}
watch_routes_back = {'KIX‚ÜíKZN', 'TYO‚ÜíKZN'}

alerts = []

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
client = gspread.authorize(creds)
spreadsheet = client.open("Avia Sexuals")

# –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–≤–∞ –ª–∏—Å—Ç–∞: —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ
try:
    worksheet_to = spreadsheet.worksheet("–ë–∏–ª–µ—Ç—ã —Ç—É–¥–∞")
except:
    worksheet_to = spreadsheet.add_worksheet(title="–ë–∏–ª–µ—Ç—ã —Ç—É–¥–∞", rows="100", cols="20")

try:
    worksheet_back = spreadsheet.worksheet("–ë–∏–ª–µ—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ")
except:
    worksheet_back = spreadsheet.add_worksheet(title="–ë–∏–ª–µ—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ", rows="100", cols="20")

worksheet_to.clear()
worksheet_back.clear()

# –ó–∞–≥–æ–ª–æ–≤–∫–∏
worksheet_to.append_row([
    "–î–∞—Ç–∞", "–¶–µ–Ω–∞", "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è", "–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞", "–í—Ä–µ–º—è –≤ –ø—É—Ç–∏ (—á:–º)", "–ú–∞—Ä—à—Ä—É—Ç"
])
worksheet_back.append_row([
    "–î–∞—Ç–∞", "–¶–µ–Ω–∞", "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è", "–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞", "–í—Ä–µ–º—è –≤ –ø—É—Ç–∏ (—á:–º)", "–ú–∞—Ä—à—Ä—É—Ç"
])

# –ö–∞—Ä—Ç–∞ –∫–æ–¥–æ–≤ –≤ –≥–æ—Ä–æ–¥–∞
airport_city_map = {
    'MOW': '–ú–æ—Å–∫–≤–∞', 'KZN': '–ö–∞–∑–∞–Ω—å', 'CEK': '–ß–µ–ª—è–±–∏–Ω—Å–∫', 'SVX': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    'KIX': '–û—Å–∞–∫–∞', 'TYO': '–¢–æ–∫–∏–æ', 'FUK': '–§—É–∫—É–æ–∫–∞'
}

# –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
origins_to = ['MOW', 'KZN', 'CEK', 'SVX']
destinations_to = ['KIX', 'TYO', 'FUK']
origins_back = ['KIX', 'TYO']
destinations_back = ['KZN', 'CEK', 'SVX']

start_date = datetime(2025, 9, 1)
end_date = datetime(2025, 10, 20)

tickets_to = []
tickets_back = []

while start_date <= end_date:
    departure_date = start_date.strftime('%Y-%m-%d')
    return_date = (start_date + timedelta(days=10)).strftime('%Y-%m-%d')
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞—Ç—É: {departure_date}...")

    # –¢—É–¥–∞
    for origin in origins_to:
        for destination in destinations_to:
            params_to = {
                'origin': origin,
                'destination': destination,
                'currency': 'rub',
                'sorting': 'price',
                'limit': 30,
                'token': token
            }
            response = requests.get(url, params=params_to)
            data_to = response.json()

            if data_to.get('success') and data_to.get('data'):
                for ticket in data_to['data']:
                    if ticket.get('transfers', 2) <= 1:
                        duration_min = ticket.get('duration', 0)
                        hours, minutes = divmod(duration_min, 60)
                        price = ticket.get('price', 999999)

                        route_key = f"{origin}‚Üí{destination}"
                        if route_key in watch_routes_to and price <= THRESHOLD_TO:
                            alerts.append(
                                f"üî• –î–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç –¢–£–î–ê!\n"
                                f"{airport_city_map[origin]} ‚Üí {airport_city_map[destination]}\n"
                                f"–î–∞—Ç–∞: {departure_date}\n"
                                f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                                f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {ticket.get('airline', '‚Äî')}\n"
                                f"–†–µ–π—Å: {ticket.get('flight_number', '‚Äî')}"
                                f"-----------------------------------------------------\n"
                            )

                        tickets_to.append([
                            departure_date, price, ticket.get('airline', '‚Äî'), ticket.get('flight_number', '‚Äî'),
                            f"{hours}—á {minutes}–º",
                            f"{airport_city_map.get(origin)} ‚Üí {airport_city_map.get(destination)}"
                        ])
                        break


    # –û–±—Ä–∞—Ç–Ω–æ
    for origin in origins_back:
        for destination in destinations_back:
            params_back = {
                'origin': origin,
                'destination': destination,
                'currency': 'rub',
                'sorting': 'price',
                'limit': 30,
                'token': token
            }
            response = requests.get(url, params=params_back)
            data_back = response.json()

            if data_back.get('success') and data_back.get('data'):
                for ticket in data_back['data']:
                    if ticket.get('transfers', 2) <= 1:
                        duration_min = ticket.get('duration', 0)
                        hours, minutes = divmod(duration_min, 60)
                        price = ticket.get('price', 999999)

                        route_key = f"{origin}‚Üí{destination}"
                        if route_key in watch_routes_back and price <= THRESHOLD_BACK:
                            alerts.append(
                                f"üî• –î–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç –û–ë–†–ê–¢–ù–û!\n"
                                f"{airport_city_map[origin]} ‚Üí {airport_city_map[destination]}\n"
                                f"–î–∞—Ç–∞: {return_date}\n"
                                f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                                f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {ticket.get('airline', '‚Äî')}\n"
                                f"–†–µ–π—Å: {ticket.get('flight_number', '‚Äî')}"
                                f"-----------------------------------------------------\n"
                            )

                        tickets_back.append([
                            return_date, price, ticket.get('airline', '‚Äî'), ticket.get('flight_number', '‚Äî'),
                            f"{hours}—á {minutes}–º",
                            f"{airport_city_map.get(origin)} ‚Üí {airport_city_map.get(destination)}"
                        ])
                        break


    time.sleep(1)
    start_date += timedelta(days=1)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
tickets_to.sort(key=lambda x: x[1])
tickets_back.sort(key=lambda x: x[1])

# –ó–∞–ø–∏—Å—å –≤ Google Sheets
if tickets_to:
    worksheet_to.append_rows(tickets_to)

time.sleep(2)

if tickets_back:
    worksheet_back.append_rows(tickets_back)


today = datetime.today().strftime('%d-%m-%Y')

worksheet_back.append_row(["", "", "", "", "", f"–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {today}"])

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ email –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—à–µ–≤—ã–µ –±–∏–ª–µ—Ç—ã ---
if alerts:
    message_body = "\n\n".join(alerts)
    msg = MIMEText(message_body, "plain", "utf-8")
    msg['Subject'] = "üö® –í–Ω–∏–º–∞–Ω–∏–µ! –í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞–π–¥–µ–Ω—ã –¥–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã! –ö—Ç–æ –Ω–µ –∫—É–ø–∏—Ç —Ç–æ—Ç jay"
    msg['From'] = EMAIL_SENDER
    msg['To'] = ", ".join(EMAIL_RECEIVERS)

    try:
        with smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT) as server:
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:", e)